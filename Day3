2942. Find Words Containing Character
import java.util.*;
class Solution {
    public List<Integer> findWordsContaining(String[] words, char x) {
        ArrayList<Integer> list=new ArrayList<>();
        for(int i=0;i<words.length;i++){
            String s=words[i];
            for(int j=0;j<s.length();j++){
                if(s.charAt(j)==x){
                    list.add(i);
                    break;
                }
            }
        }
        return list;
    }
}


3541. Find Most Frequent Vowel and Consonant
class Solution {
    public int maxFreqSum(String s) {
        HashMap<Character,Integer> map=new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
    char ch = s.charAt(i);
    map.put(ch, map.getOrDefault(ch, 0) + 1);
}

        int max1=0;
        int max2=0;
        for(Map.Entry<Character, Integer> entry : map.entrySet()){
        if(entry.getKey()=='a'||entry.getKey()=='e'||entry.getKey()=='i'||entry.getKey()=='o'||entry.getKey()=='u'){
            max1=Math.max(max1,entry.getValue());
        }
        else{
            max2=Math.max(max2,entry.getValue());
        }
    }
    return Math.abs(max1+max2);
}
}

392. Is Subsequence

class Solution {
    public boolean isSubsequence(String s, String t) {
    int i = 0, j = 0;

    while (i < s.length() && j < t.length()) {
        if (s.charAt(i) == t.charAt(j)) {
            i++;  
        }
        j++;  
    }

    return i == s.length();
}

}


125. Valid Palindrome

class Solution {
    public boolean isPalindrome(String s) {
        String str=s.toLowerCase();
        String st=str.replaceAll("[^a-z0-9]","");
        int i=0,j=st.length()-1;
        while(i<j){
            if(st.charAt(i)==st.charAt(j)){
                i++;
                j--;
            }
            else{
                return false;
            }
        }
        return true;
    }
}

1. Two Sum

import java.util.*;

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        int[] temp = new int[2];

        for (int i = 0; i < nums.length; i++) {
            int diff = target - nums[i];
            if (map.containsKey(diff)) {
                temp[0] = map.get(diff);
                temp[1] = i;
                return temp;
            }
            map.put(nums[i], i);
        }

        temp[0] = -1;
        temp[1] = -1;
        return temp;
    }
}




